// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokenTransfered extends ethereum.Event {
  get params(): TokenTransfered__Params {
    return new TokenTransfered__Params(this);
  }
}

export class TokenTransfered__Params {
  _event: TokenTransfered;

  constructor(event: TokenTransfered) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class withdrawComplete extends ethereum.Event {
  get params(): withdrawComplete__Params {
    return new withdrawComplete__Params(this);
  }
}

export class withdrawComplete__Params {
  _event: withdrawComplete;

  constructor(event: withdrawComplete) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__getDetailsOfResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get lockedTime(): BigInt {
    return this[3].toBigInt();
  }

  get unlockTime(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get withdrawed(): boolean {
    return this[6].toBoolean();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getAllIds(): Array<BigInt> {
    let result = super.call("getAllIds", "getAllIds():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getAllIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getAllIds", "getAllIds():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getDetailsOf(_index: BigInt): Contract__getDetailsOfResultValue0Struct {
    let result = super.call(
      "getDetailsOf",
      "getDetailsOf(uint256):((uint256,address,address,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return changetype<Contract__getDetailsOfResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDetailsOf(
    _index: BigInt
  ): ethereum.CallResult<Contract__getDetailsOfResultValue0Struct> {
    let result = super.tryCall(
      "getDetailsOf",
      "getDetailsOf(uint256):((uint256,address,address,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getDetailsOfResultValue0Struct>(value[0].toTuple())
    );
  }

  id(): BigInt {
    let result = super.call("id", "id():(uint256)", []);

    return result[0].toBigInt();
  }

  try_id(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("id", "id():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  myTokenBalance(_tokenAddress: Address): BigInt {
    let result = super.call(
      "myTokenBalance",
      "myTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_myTokenBalance(_tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "myTokenBalance",
      "myTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  myTransactions(): Array<BigInt> {
    let result = super.call(
      "myTransactions",
      "myTransactions():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_myTransactions(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "myTransactions",
      "myTransactions():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  tokenBalanceOf(_tokenAddress: Address): BigInt {
    let result = super.call(
      "tokenBalanceOf",
      "tokenBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_tokenBalanceOf(_tokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalanceOf",
      "tokenBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totolAmount(): BigInt {
    let result = super.call("totolAmount", "totolAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totolAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totolAmount", "totolAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class LockTokenCall extends ethereum.Call {
  get inputs(): LockTokenCall__Inputs {
    return new LockTokenCall__Inputs(this);
  }

  get outputs(): LockTokenCall__Outputs {
    return new LockTokenCall__Outputs(this);
  }
}

export class LockTokenCall__Inputs {
  _call: LockTokenCall;

  constructor(call: LockTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _unlockTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LockTokenCall__Outputs {
  _call: LockTokenCall;

  constructor(call: LockTokenCall) {
    this._call = call;
  }
}

export class WithDrawTokenCall extends ethereum.Call {
  get inputs(): WithDrawTokenCall__Inputs {
    return new WithDrawTokenCall__Inputs(this);
  }

  get outputs(): WithDrawTokenCall__Outputs {
    return new WithDrawTokenCall__Outputs(this);
  }
}

export class WithDrawTokenCall__Inputs {
  _call: WithDrawTokenCall;

  constructor(call: WithDrawTokenCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithDrawTokenCall__Outputs {
  _call: WithDrawTokenCall;

  constructor(call: WithDrawTokenCall) {
    this._call = call;
  }
}
